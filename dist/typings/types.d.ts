/** @module derived */
module derived {
   /** @class CipherKey */
   class CipherKey {
       /** @class CipherKey */
       constructor();

       /**
        * @param key {Uint8Array}
        * @returns {derived.MacKey}
        */
       static new(key: Uint8Array): derived.MacKey;

       /**
        * @param plaintext {ArrayBuffer|String|Uint8Array} The text to encrypt
        * @param nonce {Uint8Array} Counter as nonce
        * @returns {Uint8Array} Encrypted payload
        */
       encrypt(plaintext: (ArrayBuffer|String|Uint8Array), nonce: Uint8Array): Uint8Array;

       /**
        * @param ciphertext {Uint8Array}
        * @param nonce {Uint8Array}
        * @returns {Uint8Array}
        */
       decrypt(ciphertext: Uint8Array, nonce: Uint8Array): Uint8Array;

       /**
        * @param e {CBOR.Encoder}
        * @returns {CBOR.Encoder}
        */
       encode(e: CBOR.Encoder): CBOR.Encoder;

       /**
        * @param d {CBOR.Encoder}
        * @returns {CipherKey}
        */
       static decode(d: CBOR.Encoder): CipherKey;

   }

   /** @class DerivedSecrets */
   class DerivedSecrets {
       /** @class DerivedSecrets */
       constructor();

       /**
        * @param input {Array<number>}
        * @param salt {Uint8Array}
        * @param info {string}
        * @returns {derived.DerivedSecrets}
        */
       static kdf(input: number[], salt: Uint8Array, info: string): derived.DerivedSecrets;

       /**
        * @param input {Array<number>} Initial key material (usually the Master Key) in byte array format
        * @param info {string} Key Derivation Data
        * @returns {derived.DerivedSecrets}
        */
       static kdf_without_salt(input: number[], info: string): derived.DerivedSecrets;

   }

   /** @class MacKey */
   class MacKey {
       /** @class MacKey */
       constructor();

       /**
        * @param key {Uint8Array} Mac Key in byte array format generated by derived secrets
        * @returns {derived.MacKey}
        */
       static new(key: Uint8Array): derived.MacKey;

       /**
        * Hash-based message authentication code
        * @param msg {string|Uint8Array}
        * @returns {Uint8Array}
        */
       sign(msg: (string|Uint8Array)): Uint8Array;

       /**
        * @param signature {Uint8Array}
        * @param msg {Uint8Array}
        * @returns {boolean}
        */
       verify(signature: Uint8Array, msg: Uint8Array): boolean;

       /**
        * @param e {CBOR.Encoder}
        * @returns {CBOR.Encoder}
        */
       encode(e: CBOR.Encoder): CBOR.Encoder;

       /**
        * @param d {CBOR.Decoder}
        * @returns {derived.MacKey}
        */
       static decode(d: CBOR.Decoder): derived.MacKey;

   }

}

/** @module errors */
module errors {
   /** @extends ProteusError */
   class DecodeError extends ProteusError {
       /** @extends ProteusError */
       constructor(message: string);

   }

   /** @extends DecryptError */
   class InvalidType extends DecryptError {
       /** @extends DecryptError */
       constructor(message: string);

   }

   /** @extends DecryptError */
   class InvalidArrayLen extends DecryptError {
       /** @extends DecryptError */
       constructor(message: string);

   }

   /** @extends DecryptError */
   class LocalIdentityChanged extends DecryptError {
       /** @extends DecryptError */
       constructor(message: string);

   }

   /** @extends ProteusError */
   class DecryptError extends ProteusError {
       /** @extends ProteusError */
       constructor(message: string);

   }

   /** @extends DecryptError */
   class RemoteIdentityChanged extends DecryptError {
       /** @extends DecryptError */
       constructor(message: string);

   }

   /** @extends DecryptError */
   class InvalidSignature extends DecryptError {
       /** @extends DecryptError */
       constructor(message: string);

   }

   /** @extends DecryptError */
   class InvalidMessage extends DecryptError {
       /** @extends DecryptError */
       constructor(message: string);

   }

   /** @extends DecryptError */
   class DuplicateMessage extends DecryptError {
       /** @extends DecryptError */
       constructor(message: string);

   }

   /** @extends DecryptError */
   class TooDistantFuture extends DecryptError {
       /** @extends DecryptError */
       constructor(message: string);

   }

   /** @extends DecryptError */
   class OutdatedMessage extends DecryptError {
       /** @extends DecryptError */
       constructor(message: string);

   }

   /** @extends DecryptError */
   class PrekeyNotFound extends DecryptError {
       /** @extends DecryptError */
       constructor(message: string);

   }

   /**
    * @class ProteusError
    * @extends Error
    */
   class ProteusError extends Error {
       /**
        * @class ProteusError
        * @extends Error
        */
       constructor();

   }

}

